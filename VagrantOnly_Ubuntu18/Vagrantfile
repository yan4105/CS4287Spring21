# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://app.vagrantup.com/boxes/search
  #
  # Since I wanted to try something other than Ubuntu, I am trying
  # FreeBSD (which is used by Netflix) but you can use the bionic64 as shown
  # I am providing another vagrant file in this directory
  config.vm.box = "ubuntu/bionic64"
  #config.vm.box = "generic/freebsd12"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "src", "/src"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "2048"
  end

  # try using openstack
  config.vm.provider "openstack"

  #
  # View the documentation for the provider you are using for more
  # information on available options.
  
  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

     export DEBIAN_FRONTEND=noninteractive
     apt-get update
     sudo apt-get -y install python3-pip
     apt-add-repository --yes --update ppa:ansible/ansible
     # apt-get -y install ansible
     
     # to use with openstack
     yes | pip3 install ansible
     
     # sudo apt-get -y purge python2.7
	
     mkdir -p /etc/ansible
     yes | cp -r /src/ansible/ansible.cfg /etc/ansible/ansible.cfg
     
     # try to fix the openstacksdk is required error
     # yes | pip3 install decorator===4.4.1	

     # try installing openstacksdk
     # yes | pip3 install --upgrade pip --ignore-installed PyYAML
     # yes | pip3 install --upgrade setuptools
     yes | pip3 install openstacksdk==0.12
     yes | pip3 install python-openstackclient
     # apt-get -y install python3-openstacksdk
     
     # try install ansible.cloud to enable ansible.cloud.server_info for playbook_get_cloud_vm_info.yml
     ansible-galaxy collection install openstack.cloud

     # apt-get -y install python3-openstackclient
     

     yes | sudo apt autoremove

     # alias python to python3
     # alias python=python3
    
     # mkdir -p ~/.config/openstack 
     # cp -r /src/ansible/sample_clouds.yaml ~/.config/openstack/clouds.yaml
  SHELL
  
  # add private key to vm
  config.vm.provision "file", source: "/home/yan/Documents/Personal/2021Spring/CS4287/VagrantOnly_Ubuntu18/mis/id_ed25519", destination: "~/.ssh/id_ed25519"
  
end
